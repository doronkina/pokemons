{"version":3,"sources":["img/pokeball.png","img/logo.png","store/store.js","components/Forms/TypeForm.jsx","components/Forms/SelectForm.jsx","components/Forms/SearchForm.jsx","components/Forms/FormsContainer.jsx","components/Header/Header.jsx","components/PokemonsBoard/PokemonCard/PokemonCard.jsx","components/PokemonsBoard/PokemonsBoard.jsx","components/PokemonsBoard/PokemonsBoardContainer.jsx","components/Pokemon/Pokemon.jsx","components/Preloader/Preloader.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","store","isFetching","limit","activePage","count","pokemons","pagePortion","setPagePortion","portion","this","types","filteredPokemons","selectedTypes","changeSelectedTypes","type","index","indexOf","push","splice","fetchedTypes","setFetchedTypes","activePokemon","setActivePokemon","pokemon","length","setLimit","clearFilters","getPokemons","page","fetch","then","res","json","Promise","all","results","map","url","runInAction","finally","getTypes","searchPokemon","status","Error","catch","err","message","alert","getFilteredPokemons","Map","flat","name","values","slice","filteredPokemonsCount","setFilteredPokemons","TypeForm","useContext","StoreContext","useState","filters","setFilters","isCheckedNewTypes","currentArr","sort","fetchedArr","i","useObserver","onClick","className","onSubmit","e","preventDefault","typeFiltration","key","value","checked","onChange","disabled","SelectForm","target","changeLimit","SearchForm","setPokemon","FormsContainer","useEffect","Header","src","logo","alt","PokemonCard","sprites","front_default","pokeball","PokemonsBoard","pagination","btns","pagesCount","first","last","Math","ceil","PokemonsBoardContainer","InfoRow","title","Array","isArray","join","Pokemon","weight","height","forms","form","abilities","ability","held_items","item","base_experience","moves","move","Preloader","createContext","StoreProvider","children","useLocalStore","globalStore","Provider","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.78ef8d35.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.5d396d00.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.651ebad9.png\";","import { runInAction } from 'mobx'\n\nconst store = {\n    isFetching: false,\n    limit: 10,\n    activePage: null,\n    count: null,\n    pokemons: [],\n\n    //pagination\n    pagePortion: 1,\n    setPagePortion(portion) {\n      this.pagePortion = portion\n    },\n\n    //checkboxes\n    types: [],\n    filteredPokemons: [],\n\n    selectedTypes: [],\n    changeSelectedTypes(type) {\n      const index = this.selectedTypes.indexOf(type)\n      if (index === -1) {\n        this.selectedTypes.push(type)\n      } else {\n        this.selectedTypes.splice(index, 1)\n      }\n    },\n    fetchedTypes: [],\n    setFetchedTypes() {\n      this.fetchedTypes = [...this.selectedTypes]\n    },\n\n    //pokemon\n    activePokemon: null,\n    setActivePokemon(pokemon) {\n      this.activePokemon = pokemon\n    },\n\n    get pagesCount() {\n      return this.count / this.limit\n    },\n    get filteredPokemonsCount() {\n      return this.filteredPokemons.length\n    },\n\n    setLimit(limit) {\n      this.limit = limit\n    },\n    clearFilters() {\n      this.filteredPokemons = []\n      this.selectedTypes = []\n      this.fetchedTypes = []\n    },\n\n    getPokemons(page) {\n      this.isFetching = true\n\n      fetch(`https://pokeapi.co/api/v2/pokemon?limit=${this.limit}&offset=${(page - 1) * this.limit}`)\n        .then(res => res.json())\n        .then(res => {\n          Promise.all( res.results.map(res => fetch(res.url).then( res => res.json() )) )\n            .then(pokemons => {\n              runInAction(() => {\n                this.pokemons = pokemons\n                this.count = res.count\n                this.activePage = page\n              })\n            })\n            .finally(() => {\n              runInAction(() => {\n                this.isFetching = false\n              })\n            })        \n        })\n    },\n    getTypes() {\n      this.isFetching = true\n      \n      fetch('https://pokeapi.co/api/v2/type')\n        .then(res => res.json())\n        .then(res => {\n          runInAction(() => {\n            this.types = res.results\n          })\n        })\n        .finally(() => {\n          runInAction(() => {\n            this.isFetching = false\n          })\n        })\n    },\n    searchPokemon(pokemon) {\n      this.isFetching = true\n      \n      fetch(`https://pokeapi.co/api/v2/pokemon/${pokemon}`)\n        .then(res => {\n          if (res.status === 200) {\n            return res.json()\n          }\n          \n          throw Error(res.status);\n        })\n        .then(res => {\n          runInAction(() => {\n            this.pokemons = [res]\n            this.filteredPokemons = []\n            this.selectedTypes = []\n            this.fetchedTypes = []\n            this.count = 1\n            this.activePage = 1\n            this.pagePortion = 1\n          })\n        })\n        .catch(err => {\n          if(err.message === '404') {\n            alert(`Not Found ${pokemon}`)\n          }\n        })\n        .finally(() => {\n          runInAction(() => {\n            this.isFetching = false\n          })\n        })\n    },\n    getFilteredPokemons(types) {\n      this.isFetching = true\n      \n      Promise.all( types.map(type => fetch(`https://pokeapi.co/api/v2/type/${type}`).then( res => res.json() )) )\n        .then(res => res.map(type => type.pokemon.map(pokemon => pokemon.pokemon)))\n        .then(res => {\n          const filteredPokemons = [...new Map( res.flat().map(pokemon => [pokemon.name, pokemon]) ).values()]\n\n          runInAction(() => {\n            this.filteredPokemons = filteredPokemons\n          })\n\n          return filteredPokemons.slice(0, this.limit)\n        })\n        .then(res => {\n          Promise.all( res.map(pokemon => fetch(pokemon.url).then( res => res.json() )) )\n            .then(res => {\n              runInAction(() => {\n                this.pokemons = res\n                this.count = this.filteredPokemonsCount\n                this.activePage = 1\n                this.pagePortion = 1 \n              })\n            })\n            .finally(() => {\n              runInAction(() => {\n                this.isFetching = false\n              })\n            })\n        })\n    },\n    setFilteredPokemons(page) {\n      this.isFetching = true\n      \n      const pokemons = this.filteredPokemons.slice((page - 1) * this.limit, page * this.limit)\n      Promise.all( pokemons.map(pokemon => fetch(pokemon.url).then( res => res.json() )) )\n        .then(res => {\n          runInAction(() => {\n            this.pokemons = res\n            this.activePage = page\n          })\n        })\n        .finally(() => {\n          runInAction(() => {\n            this.isFetching = false\n          })\n        })\n    }\n}\n\nexport default store","import React, { useContext, useState } from 'react'\nimport { useObserver } from 'mobx-react'\nimport { StoreContext } from '../../App'\n\nconst TypeForm = () => {\n  const store = useContext(StoreContext)\n  const {selectedTypes, changeSelectedTypes, fetchedTypes, setFetchedTypes} = store\n  const [filters, setFilters] = useState(false)\n\n  const typeFiltration = e => {\n    if(selectedTypes.length) {\n      store.getFilteredPokemons(selectedTypes)\n\n      setFilters(!filters)\n      setFetchedTypes([...selectedTypes])\n    }\n\n    e.preventDefault()\n  }\n\n  const clearFilters = () => {\n    store.getPokemons()\n    store.clearFilters()\n  }\n\n  const isCheckedNewTypes = () => {\n    if(selectedTypes.length !== fetchedTypes.length){\n      return true\n    }\n    \n    const currentArr = selectedTypes.slice().sort()\n    const fetchedArr = fetchedTypes.slice().sort()\n\n    for (let i = 0; i < selectedTypes.length; i++) {\n      if(currentArr[i] !== fetchedArr[i]) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  return useObserver(() => (\n    <>\n      <button onClick={() => {setFilters(!filters)}}>Filters</button>\n      <div className={filters ? 'filters__open' : 'filters'}>\n        <form onSubmit={(e) => { typeFiltration(e) }}>\n          <h4>Pokemons Types</h4>\n          <div className='filter__container'>\n            {store.types.map(type => \n              <label key={type.name}>\n                <input type='checkbox' name='type' value={type.name} checked={selectedTypes.indexOf(type.name) !== -1} onChange={() => { changeSelectedTypes(type.name) }} />\n                {type.name}\n              </label>\n            )}\n          </div>\n          <div className='filter__btns'>\n            <button type='submit' disabled={!selectedTypes.length || !isCheckedNewTypes()}>Apply</button>\n            <button onClick={clearFilters} disabled={!fetchedTypes.length}>Clear</button>\n          </div>\n        </form>\n      </div>\n    </>\n  ))\n}\n\nexport default TypeForm","import React, { useContext } from 'react'\nimport { useObserver } from 'mobx-react'\nimport { StoreContext } from '../../App'\n\nconst SelectForm = () => {\n  const store = useContext(StoreContext)\n  \n  const changeLimit = e => {\n    store.setLimit(e.target.value)\n  \n    if(!store.filteredPokemonsCount) {\n      store.getPokemons(1)\n    } else {\n      store.setFilteredPokemons(1)\n    }\n  \n    store.setPagePortion(1)\n  }\n  \n  return useObserver(() => (\n    <form className='limitForm'>\n      <select value={store.limit} onChange={e => { changeLimit(e) }}>\n        <option value={10}>10</option>\n        <option value={20}>20</option>\n        <option value={50}>50</option>\n      </select>\n    </form>\n  ))\n}\n\nexport default SelectForm","import React, { useContext, useState } from 'react'\nimport { StoreContext } from '../../App'\n\nconst SearchForm = () => {\n  const store = useContext(StoreContext)\n  const [pokemon, setPokemon] = useState('')\n  \n  const searchPokemon = e => {\n    if(pokemon.length) {\n      store.searchPokemon(pokemon)\n    }\n  \n    e.preventDefault()\n  }\n  \n  return (\n    <form className='searchForm' onSubmit={searchPokemon}>\n      <input type='search' value={pokemon} onChange={ e => { setPokemon(e.target.value) } } />\n      <button type='submit'>Search</button>\n    </form>\n  )\n}\n\nexport default SearchForm","import React, { useContext, useEffect } from 'react'\nimport { StoreContext } from '../../App'\nimport TypeForm from './TypeForm'\nimport SelectForm from './SelectForm'\nimport SearchForm from './SearchForm'\n\nconst FormsContainer = () => {\n  const store = useContext(StoreContext)\n  \n  useEffect(() => {\n    store.getTypes()\n  })\n  \n  return(\n    <>\n      <TypeForm />\n      <SelectForm />\n      <SearchForm />\n    </>\n  )\n}\n\nexport default FormsContainer","import React, { useContext } from 'react'\nimport { StoreContext } from '../../App'\nimport logo from '../../img/logo.png'\nimport FormsContainer from '../Forms/FormsContainer'\n\nconst Header = () => {\n  const store = useContext(StoreContext)\n  \n  const setInitialState = () => {\n    store.setLimit(10)\n    store.getPokemons(1)\n    store.clearFilters()\n  }\n  \n  return(\n    <header className='main-header'>\n      <div className='main-header__container'>\n        <div className='main-header__logo'>\n          <img src={logo} alt='logo' onClick={setInitialState} />\n        </div>\n        <FormsContainer />\n      </div>\n    </header>\n  )\n}\n\nexport default Header","import React, { useContext } from 'react'\nimport { StoreContext } from '../../../App'\nimport pokeball from '../../../img/pokeball.png'\n\nconst PokemonCard = ({pokemon}) => {\n    const store = useContext(StoreContext)\n  \n    return (\n        <div className='pokemon-card' onClick={() => {store.setActivePokemon(pokemon)}}>\n            <div className='pokemon-card__header'>\n                <h4>{pokemon.name}</h4>\n            </div>\n            <div className='pokemon-card__img'>\n                <img src={pokemon.sprites.front_default || pokeball} alt={pokemon.name} />\n            </div>\n            <p className='pokemon-card__footer'>{pokemon.types.map(type => <span key={type.type.name}>{type.type.name}</span>)}</p>\n        </div>\n    )\n}\n\nexport default PokemonCard","import React, { useContext } from 'react'\nimport { useObserver } from 'mobx-react'\nimport { StoreContext } from '../../App'\nimport PokemonCard from './PokemonCard/PokemonCard'\n\nconst PokemonsBoard = () => {\n  const store = useContext(StoreContext)\n  \n  const pagination = portion => {\n    const openPage = page => {\n      if (!store.filteredPokemonsCount) {\n        store.getPokemons(page)\n      } else {\n        store.setFilteredPokemons(page)\n      }\n    }\n  \n    const btns = []\n    if(store.pagesCount) {\n      const first = (portion - 1) * 7\n      let last = (portion * 7) < store.pagesCount ? (portion * 7) : store.pagesCount\n  \n      for(let i = first; i < last; i++) {\n        btns.push(<button key={i} onClick={() => { openPage(i + 1) }} disabled={(i + 1) === store.activePage}>{i + 1}</button>)\n      }\n    }\n  \n    return(btns)\n  }\n  \n  return useObserver(() => (\n    <div className='pokemons'>\n      <div className='pokemons__container'>\n        {store.pokemons.map(pokemon => <PokemonCard key={pokemon.name} pokemon={pokemon} />)}\n      </div>\n      <div className='pagination'>\n        <div className='pagination__container'>\n          <button onClick={() => {store.setPagePortion(store.pagePortion - 1)}} disabled={store.pagePortion === 1}>...</button>\n          <div className='pagination__pages'>\n            { pagination(store.pagePortion) }\n          </div>\n          <button onClick={() => {store.setPagePortion(store.pagePortion + 1)}} disabled={store.pagePortion === Math.ceil(store.pagesCount / 7)}>...</button>\n        </div>\n      </div>\n    </div>\n  ))\n}\n\nexport default PokemonsBoard","import React, { useContext, useEffect } from 'react'\nimport { StoreContext } from '../../App'\nimport PokemonsBoard from './PokemonsBoard'\n\nconst PokemonsBoardContainer = () => {\n    const store = useContext(StoreContext)\n  \n    useEffect(() => {\n        store.getPokemons(1)\n    })\n  \n    return <PokemonsBoard />\n}\n\nexport default PokemonsBoardContainer","import React, { useContext } from 'react'\nimport { useObserver } from 'mobx-react'\nimport { StoreContext } from '../../App'\nimport pokeball from '../../img/pokeball.png'\n\nconst Pokemon = () => {\n    const store = useContext(StoreContext)\n  \n    return useObserver(() =>(\n        <>\n        {store.activePokemon &&\n            <div className='pokemon' >\n                <div className='pokemon__container'>\n                    <div className='pokemon__header'>\n                        <h4>{store.activePokemon.name}</h4>\n                        <button className='close' onClick={() => {store.setActivePokemon(null)}}></button>\n                    </div>\n                    <div className='pokemon__main'>\n                        <div className='pokemon-card__img'>\n                            <img src={store.activePokemon.sprites.front_default || pokeball} alt={store.activePokemon.name} />\n                        </div>\n                        <div className='pokemon__info'>\n                            <InfoRow title={'weight'} value={store.activePokemon.weight} />\n                            <InfoRow title={'height'} value={store.activePokemon.height} />\n            \n                            <InfoRow title={'forms'} value={store.activePokemon.forms.map(form => form.name)} />\n                            <InfoRow title={'types'} value={store.activePokemon.types.map(type => type.type.name)} />\n                            <InfoRow title={'abilities'} value={store.activePokemon.abilities.map(ability => ability.ability.name)} />\n                            <InfoRow title={'held items'} value={store.activePokemon.held_items.map(item => item.item.name)} />\n            \n                            <InfoRow title={'base experience'} value={store.activePokemon.base_experience} />\n                            <InfoRow title={'moves'} value={store.activePokemon.moves.map(move => move.move.name)} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        }\n        </>\n    ))\n}\n  \nconst InfoRow = ({title, value}) => {\n    return(\n        <div className='row'>\n            <p className='left'>{title}</p>\n            <p className='right'>{Array.isArray(value) ? value.join(', ') : value}</p>\n        </div>\n    )\n}\n\nexport default Pokemon","import React, { useContext } from 'react'\nimport { useObserver } from 'mobx-react'\nimport { StoreContext } from '../../App'\nimport pokeball from '../../img/pokeball.png'\n\nconst Preloader = () => {\n  const store = useContext(StoreContext)\n  \n  return useObserver(() => (\n    <>\n      {store.isFetching &&\n        <div className='preloader'>\n          <div className='preloader__img'>\n            <img src={pokeball} alt='pokeball' />\n          </div>\n        </div>\n      }\n    </>\n  ))\n}\n\nexport default Preloader","import React, { createContext } from 'react'\nimport { useLocalStore } from 'mobx-react'\nimport './App.scss'\nimport globalStore from './store/store'\nimport Header from './components/Header/Header'\nimport PokemonsBoardContainer from './components/PokemonsBoard/PokemonsBoardContainer'\nimport Pokemon from './components/Pokemon/Pokemon'\nimport Preloader from './components/Preloader/Preloader'\n\n// store\nexport const StoreContext = createContext()\n\nconst StoreProvider = ({children}) => {\n  const store = useLocalStore(() => (globalStore))\n\n  return <StoreContext.Provider value={store} >{children}</StoreContext.Provider>\n}\n\nconst App = () => {\n  return (\n    <StoreProvider>\n      <Header />\n      <PokemonsBoardContainer />\n      <Pokemon />\n      <Preloader />\n    </StoreProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}